<?xml version="1.0" encoding="UTF-8"?>

<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。-->
    <!--scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
    <!--debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->

    <contextName>demo</contextName>
    <!--contextName用于区分不同应用程序的记录-->

    <!--<property>用来定义变量值的标签，有两个属性，name和value,其中name的值是变量的名称，value的值时变量定义的值。-->
    <!--通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。-->

    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
    <property name="LOG_HOME" value="./../logs"/>

    <!--日志的形式-->
    <property name="LogPattern"
              value="[%date{yyyy-MM-dd HH:mm:ss.SSS}] %X{logthreadId} %-5level %logger{80} %M-%L - %msg%n"/>
    <property name="CHARSET" value="UTF-8"/>
    <!--日志保留的最长时间-->
    <property name="MaxHistory" value="30"/>
    <property name="MaxFileSize" value="50MB"/>
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 过滤掉 DEBUG 级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出,%d:日期;%thread:线程名;%-5level：级别,从左显示5个字符宽度;%msg:日志消息;%n:换行符 -->
            <pattern>${LogPattern}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
    </appender>

    <!-- 控制台输出DEBUGd fwherp0
    级别日志 -->
    <appender name="FILEDEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件保留天数-->
            <MaxHistory>${MaxHistory}</MaxHistory>
            <!-- 日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/debug_%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${MaxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <append>true</append>
        <!-- 日志文件的文件最大大小和文件总数目 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LogPattern}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!-- 控制台输出INFO级别日志 -->
    <appender name="FILEINFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件保留天数-->
            <MaxHistory>${MaxHistory}</MaxHistory>
            <!--              日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/info_%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${MaxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <append>true</append>
        <encoder
                class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LogPattern}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>
    <!--WARN级别的日志-->
    <appender name="FILEWARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件保留天数-->
            <MaxHistory>${MaxHistory}</MaxHistory>
            <!--              日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/warn%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${MaxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <append>true</append>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LogPattern}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--错误日志统一输出到这里 -->
    <appender name="FILEERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> <!--日志文件输出的文件名 -->
            <!-- 日志文件保留天数-->
            <MaxHistory>${MaxHistory}</MaxHistory>
            <FileNamePattern>${LOG_HOME}/error_%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${MaxFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <append>true</append>
        <encoder
                class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>${LogPattern}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--<logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。-->
    <!--name:用来指定受此loger约束的某一个包或者具体的某一个类。-->
    <!--level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。-->
    <!--addtivity:是否向上级loger传递打印信息。默认是true。-->
    <!--<logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。-->

    <!--<logger name="java.sql" />将控制java.sql包下的所有类的日志的打印，-->
    <!--如果设置打印级别，则继承他的上级<root>的日志级别-->
    <!--没有设置addtivity，默认为true，将此loger的打印信息向上级传递-->
    <!--没有设置appender，此loger本身不打印任何信息-->

    <!-- mybatis日志打印-->
    <logger name="org.apache.ibatis" level="DEBUG"/>
    <logger name="java.sql" level="DEBUG"/>

    <!--Mybatis log configure -->
    <logger name="java.sql" level="WARN" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILEERROR"/>
        <appender-ref ref="FILEWARN"/>
    </logger>
    <logger name="tk.mybatis.spring" level="WARN" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILEERROR"/>
        <appender-ref ref="FILEWARN"/>
    </logger>
    <logger name="org.apache.commons" level="INFO" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILEERROR"/>
        <appender-ref ref="FILEWARN"/>
    </logger>
    <logger name="org.apache.shiro" level="INFO" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILEERROR"/>
        <appender-ref ref="FILEWARN"/>
    </logger>
    <logger name="org.mybatis.spring" level="INFO" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILEERROR"/>
        <appender-ref ref="FILEWARN"/>
    </logger>
    <!-- （改）过滤器，可以指定哪些包，哪个记录到等级， -->
    <logger name="org.springframework" level="INFO" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILEERROR"/>
        <appender-ref ref="FILEWARN"/>
    </logger>

    <!--<root>也是<logger>元素，但是它是根logger。只有一个level属性，应为已经被命名为"root".-->
    <!--level:-用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。-->
    <!--<root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。-->


    <!--<root level="DEBUG">将root的打印级别设置为“DEBUG”，指定了名字为“STDOUT”的appender-->
    <!--当执行包java.sql中，所以首先执行<logger name="java.sql" level="DEBUG"/> 将级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，本身并不打印；-->
    <!--root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；-->
    <!-- 全局，控制台遇到debug及以上级别就进行输出 -->
    <root level="DEBUG">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILEERROR"/>
        <appender-ref ref="FILEWARN"/>
        <appender-ref ref="FILEINFO"/>
        <appender-ref ref="FILEDEBUG"/>
    </root>
</configuration>
